<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>杨浩的技术博客</title>
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://yanghaopro.github.io/"/>
  <updated>2016-12-04T16:13:54.000Z</updated>
  <id>https://yanghaopro.github.io/</id>
  
  <author>
    <name>YoungHao</name>
    <email>younghaopro@foxmail.com</email>
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>网络套接字函数</title>
    <link href="https://yanghaopro.github.io/2016/12/05/%E7%BD%91%E7%BB%9C%E5%A5%97%E6%8E%A5%E5%AD%97%E5%87%BD%E6%95%B0/"/>
    <id>https://yanghaopro.github.io/2016/12/05/网络套接字函数/</id>
    <published>2016-12-04T16:13:16.000Z</published>
    <updated>2016-12-04T16:13:54.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="网络套接字函数"><a href="#网络套接字函数" class="headerlink" title="网络套接字函数"></a>网络套接字函数</h2><h3 id="socket"><a href="#socket" class="headerlink" title="socket"></a>socket</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">#include &lt;sys/types.h&gt;</div><div class="line">#include &lt;sys/socket.h&gt;</div><div class="line">int socket(int domain, int type, int protocol)</div><div class="line"></div><div class="line">domain:</div><div class="line">    AF_INET 这是大多数用来产生socket的协议，使用TCP或者UDP来传输，用IPv4的地址</div><div class="line">    AF_INET6 与上面类似，不过是用IPv6协议</div><div class="line">    AF_UNIX 本地协议，使用在Unix和Linux系统上，一般都是当客服端和服务器在同一台及其上的时候使用</div><div class="line"></div><div class="line">types:</div><div class="line">    SOCK_STREAM 这个协议是按照顺序，可靠的，数据完整的基于字节流的连接。这是一个使用最多的socket类型，这个socket是使用TCP来进行传输。</div><div class="line">    SOCK_DGRAM 这个</div></pre></td></tr></table></figure>
<h3 id="bind函数"><a href="#bind函数" class="headerlink" title="bind函数"></a>bind函数</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line">#include &lt;sys/types.h&gt;</div><div class="line">#include &lt;sys/socket.h&gt;</div><div class="line"></div><div class="line">int bind(int sockfd, const sockaddr *addr,socklen_t addrlen);</div><div class="line"></div><div class="line">sockfd:</div><div class="line">    文件描述符</div><div class="line">addr:</div><div class="line">    构造出IP地址和端口</div><div class="line">addrlen:</div><div class="line">    sizeof(addr)长度</div><div class="line">返回值:</div><div class="line">    成功返回0, 失败返回-1, 设置error</div></pre></td></tr></table></figure>
<p>服务器程序所监听的网络地址和端口号通常是固定不变的，客服端程序得知服务器程序的地址和端口号后就可以向服务器发起链接，因此服务器需要调用bind绑定一个固定的网络地址和端口号。<br>    bind()的作用是将参数sockfd和addr绑定在一起，使用sockfd这个用于网络通讯的文件描述符监听addr所描述的地址和端口号。struct sockaddr *是个通用指针类型,addr参数实际上可以接受多种协议的sockaddr结构体，而他们的长度各不相同，所以需要第三个参数addrlen指定结构体的长度。</p>
<h3 id="listen-函数"><a href="#listen-函数" class="headerlink" title="listen 函数"></a>listen 函数</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">#include &lt;sys/types.h&gt;</div><div class="line">#include &lt;sys/socket.h&gt;</div><div class="line"></div><div class="line">int listen(int sockfd, int backlog);</div><div class="line">sockfd:</div><div class="line">    sockfd文件描述符</div><div class="line">backlog:</div><div class="line">    排队建立3次握手队列和刚刚建立3次握手队列的连接数和</div><div class="line">返回值:</div><div class="line">    成功返回0, 失败返回-1</div></pre></td></tr></table></figure>
<p>查看系统默认backlog</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">cat /proc/sys/net/ipv4/tcp_max_syn_backlog</div></pre></td></tr></table></figure>
<p>典型的服务器程序可以同时服务于多个客服端，当有客服端发起连接时，服务器调用的accept()返回并接受这个连接，如果有大量的客服端发起连接而服务器来不及处理，尚未accept的客服端就处于连接等待状态，listen()声明sockfd处于监听状态，并且最多允许有backlog个客服端处于连接等待状态，如果接收到更多的连接请求就忽略。listen()成功返回0，失败返-1。</p>
<h3 id="accept-函数"><a href="#accept-函数" class="headerlink" title="accept 函数"></a>accept 函数</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">#include &lt;sys/types.h&gt;</div><div class="line">#include &lt;sys/socket.h&gt;</div><div class="line"></div><div class="line">int accept(int sockfd, struct sockaddr *addr, socklen_t addrlen);</div><div class="line">sockfd:</div><div class="line">    socket文件描述符</div><div class="line">addr:</div><div class="line">    传出参数，返回连接客服端地址信息，含IP地址和端口号</div><div class="line">addrlen:</div><div class="line">    传入传出参数(值-结果),传入sizeof(addr)大小，函数返回时返回真正接受到地址结构体的大小</div><div class="line">返回值:</div><div class="line">    成功返回一个新的socket文件描述符, 用于和客服端通信，失败返回-1, 设置errno</div></pre></td></tr></table></figure>
<p>三次握手完成后，服务器调用accept()接受连接，如果服务器调用accept()时还没有客服端的连接请求，就阻塞等待直到有客服端连接上来。addr是一个传出参数，accept()返回时传出客服端的地址和端口号。addrlen参数时一个传入传出参数(value-result argument)，传入的是调用者提供的缓冲区addr的长度以避免缓冲区溢出问题，传出的是客服端地址结构体的实际长度(有可能没有占满调用者提供的缓冲区)。如果给addr参数传入NULL，表示拥护不关心客服端的地址。</p>
<p>我们的服务器程序结构是这样的：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">while(1) &#123;</div><div class="line">    cliaddr_len = sizeof(cliaddr);</div><div class="line">    connfd = accept(listenfd, (struct sockaddr *)&amp;cliaddr, &amp;cliaddr_len); </div><div class="line">    n = read(connfd, buf, MAXLINE);</div><div class="line">    ......</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>整个是一个while死循环，每次循环处理一个客服端连接请求。由于cliaddr_len是传入传出参数，每次调用accept()之前应该重新赋初值。accept()的参数是先前的监听文件描述符，而accept()的返回值是另一个文件描述符connfd，之后与客服端之间就通过connfd通讯，最后关闭connfd断开连接，而不关闭listenfd，再次回到循环开头listenfd仍作为accept()的参数。accept()成功返回一个新的socket文件描述符, 错误返回-1,。</p>
<h3 id="connect"><a href="#connect" class="headerlink" title="connect"></a>connect</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">#include &lt;sys/types.h&gt;</div><div class="line">#include &lt;sys/socket.h&gt;</div><div class="line"></div><div class="line">int connect(int sockfd, const struct sockaddr *addr, socklen_t addrlen);</div><div class="line">sockfd:</div><div class="line">    socket文件描述符</div><div class="line">addr:</div><div class="line">    传入参数, 指定服务器端地址信息，含IP地址和端口号</div><div class="line">addrlen:</div><div class="line">    传入参数, 传入sizeof(addr)大小</div><div class="line">返回值:</div><div class="line">    成功返回0, 失败返回-1, 设置errno</div></pre></td></tr></table></figure>
<p>客服端需要调用connect()连接服务器，connect和bind的参数形式一致，区别在于bind的参数是自己的地址，而connect的参数是对方的地址。connect()成功返回0, 失败返回-1。</p>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;网络套接字函数&quot;&gt;&lt;a href=&quot;#网络套接字函数&quot; class=&quot;headerlink&quot; title=&quot;网络套接字函数&quot;&gt;&lt;/a&gt;网络套接字函数&lt;/h2&gt;&lt;h3 id=&quot;socket&quot;&gt;&lt;a href=&quot;#socket&quot; class=&quot;headerlink&quot; 
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>Hello World</title>
    <link href="https://yanghaopro.github.io/2016/12/04/hello-world/"/>
    <id>https://yanghaopro.github.io/2016/12/04/hello-world/</id>
    <published>2016-12-04T15:08:39.000Z</published>
    <updated>2016-12-04T15:08:39.000Z</updated>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/" target="_blank" rel="external">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="external">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="external">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="external">GitHub</a>.</p>
<h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ hexo new <span class="string">"My New Post"</span></div></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="external">Writing</a></p>
<h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ hexo server</div></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="external">Server</a></p>
<h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ hexo generate</div></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="external">Generating</a></p>
<h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ hexo deploy</div></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/deployment.html" target="_blank" rel="external">Deployment</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Welcome to &lt;a href=&quot;https://hexo.io/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Hexo&lt;/a&gt;! This is your very first post. Check &lt;a href=&quot;https://hexo.
    
    </summary>
    
    
  </entry>
  
</feed>
